AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Stream S3 data access logs from CloudTrail  to CloudWatch Logs to Lambda
  to ElasticSearch.

  '
Globals:
  Function:
    Timeout: 5
Parameters:
  EsIndex:
    Type: String
    Default: cloudwatch-logs
  EsDocType:
    Type: String
    Default: s3-log
  EsEndpoint:
    Type: String
  EsDomainName:
    Type: String
Resources:
  PublishToElasticSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PublishToElasticSearchFunction
      Handler: app.handler
      Runtime: python3.7
      Environment:
        Variables:
          ES_ENDPOINT:
            Ref: EsEndpoint
          ES_REGION:
            Fn::Sub: ${AWS::Region}
          ES_INDEX:
            Ref: EsIndex
          ES_DOC_TYPE:
            Ref: EsDocType
      Events:
        S3CloudTrailLogsEvent:
          Type: CloudWatchLogs
          Properties:
            FilterPattern: ''
            LogGroupName:
              Ref: LogGroup
      Policies:
      - AWSLambdaVPCAccessExecutionRole
      - ElasticsearchHttpPostPolicy:
          DomainName:
            Ref: EsDomainName
      VpcConfig:
        SecurityGroupIds:
        - sg-00e88c6dc027cc7ce
        SubnetIds:
        - subnet-014bb42f
        - subnet-d3c33e8f
  S3Bucket:
    Type: AWS::S3::Bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:GetBucketAcl
          Resource:
            Fn::Sub: arn:aws:s3:::${S3Bucket}
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
    - BucketPolicy
    Properties:
      S3BucketName:
        Ref: S3Bucket
      IncludeGlobalServiceEvents: false
      IsLogging: true
      IsMultiRegionTrail: false
      CloudWatchLogsLogGroupArn:
        Fn::GetAtt:
        - LogGroup
        - Arn
      CloudWatchLogsRoleArn:
        Fn::GetAtt:
        - CloudTrailRole
        - Arn
      EventSelectors:
      - DataResources:
        - Type: AWS::S3::Object
          Values:
          - 'arn:aws:s3:::'
        IncludeManagementEvents: false
  CloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudtrail.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  CloudTrailRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudtrailLogsWritePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:*
      Roles:
      - Ref: CloudTrailRole
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  CloudWatchRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:*
          Resource: '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: '*'
      Roles:
      - Ref: CloudWatchRole
